map "http://hl7.org/fhir/StructureMap/truecover-add-location-sm" = 'True Cover Add Location'
uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group AddLocation(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.type = "collection" "r_bundle_type";
    src then ExtractLocation(src, bundle)"r_bundle_entries";
}

group ExtractLocation(source src : QuestionnaireResponse, target bundle : Bundle) {
    src -> bundle.entry as entry, entry.resource = create("Location") as loc then {
    	src -> loc.id = uuid() "r_loc_id";
    	src -> loc.status =  "active" "r_loc_status";
    	src -> loc.meta = create("Meta") as meta then {
    	    src.item as province where(linkId="select-province") and answer.count()>0 then {
                src -> meta.tag = create("Coding") as coding then {
                    src -> coding.code = evaluate(province, $this.answer.value.reference.split("/")[1]) "r_loc_level_1_meta_code";
                    src -> coding.system = "http://smartregister.org/CodeSystem/location-lineage" "r_loc_level_1_meta_system";
                } "r_loc_level_1_meta_tag";
            } "r_loc_level_1_meta_exists";
            src.item as district where(linkId="select-district") and answer.count()>0 then {
                src -> meta.tag = create("Coding") as coding then {
                    src -> coding.code = evaluate(district, $this.answer.value.reference.split("/")[1]) "r_loc_level_2_meta_code";
                    src -> coding.system = "http://smartregister.org/CodeSystem/location-lineage" "r_loc_level_2_meta_system";
                } "r_loc_level_2_meta_tag";
            } "r_loc_level_2_meta_exists";
            src.item as operationalArea where(linkId="select-operational-area") and answer.count()>0 then {
                src -> meta.tag = create("Coding") as coding then {
                    src -> coding.code = evaluate(operationalArea, $this.answer.value.reference.split("/")[1]) "r_loc_level_3_meta_code";
                    src -> coding.system = "http://smartregister.org/CodeSystem/location-lineage" "r_loc_level_3_meta_system";
                } "r_loc_level_3_meta_tag";
            } "r_loc_level_3_meta_exists";
    	} "r_loc_meta";
    	src.item as locName where(linkId="location-name") and answer.count()>0 then {
    	    src -> loc.name = evaluate(locName, $this.answer.value) "r_loc_name";
    	} "r_loc_name_exists";

    	// Extract lat/long from dropped pin
    	src.item as locLon where(linkId="positionLongitude") and answer.count()>0 then {
    	    src.item as locLat where(linkId="positionLatitude") and answer.count()>0 then {
                src -> loc.position = create("Location_Position") as pos then {
                    src -> pos.longitude = evaluate(locLon, $this.answer.value)"r_loc_long";
                    src -> pos.latitude = evaluate(locLat, $this.answer.value) "r_loc_lat";
                } "r_loc_pos";
            } "r_loc_lat_exists";
        } "r_loc_lon_exists";

        // Extract lat/long from GPS coordinates
       src.item as locationWidgetItem where(linkId='location-widget') then {
           src -> loc.position = create("Location_Position") as position then {
                locationWidgetItem.item as itemLatitude where(linkId='latitude') then {
                   src -> position.latitude = evaluate(src, itemLatitude.answer.value) "r-position-latitude";
               } "r-latitude-item";
               locationWidgetItem.item as itemLongitude where(linkId='longitude') then {
                   src -> position.longitude = evaluate(src, itemLongitude.answer.value) "r-position-longitude";
               } "r-longitude-item";
           } "r_position_data";
       } "r_loc_widget";

        src -> loc.type = create("CodeableConcept") as concept then {
            src -> concept.coding = create("Coding") as coding then {
                src -> coding.code = "bu" "r_building_loc_type_code";
                src -> coding.display = "Building" "r_building_loc_type_display";
                src -> coding.system = "http://terminology.hl7.org/CodeSystem/location-physical-type" "r_building_loc_type_system";
                } "r_building_loc_type_coding";
        } "r_building_loc_type";

        src -> loc.type = create("CodeableConcept") as concept then {
            src -> concept.coding = create("Coding") as coding then {
                src -> coding.code = "5" "r_admin_level_loc_type_code";
                src -> coding.display = "Level 5" "r_admin_level_loc_type_display";
                src -> coding.system = "https://smartregister.org/codes/administrative-level" "r_admin_level_loc_type_system";
            } "r_admin_level_loc_type_coding";
        } "r_admin_level_loc_type_concept";

        src -> loc.physicalType = create("CodeableConcept") as concept then {
             src -> concept.coding = create("Coding") as coding then {
                src -> coding.code = "bu" "r_loc_type_code";
                src -> coding.display = "Building" "r_loc_type_display";
                src -> coding.system = "http://terminology.hl7.org/CodeSystem/location-physical-type" "r_loc_type_system";
            } "r_loc_type_coding";
        } "r_loc_type_concept";

        src.item as parentLoc where(linkId="select-operational-area") and answer.count()>0 then {
            src -> loc.partOf = create("Reference") as ref then {
                src -> ref.reference = evaluate(parentLoc, $this.answer.value.reference) "r_loc_part_of";
                src -> ref.display = evaluate(parentLoc, $this.answer.value.display)  "r_loc_part_of_display";
            } "r_loc_part_of_ref";
        } "r_parent_location";

        src then ExtractGroup(src, loc ,bundle) "r_extract_group";
    } "r_loc";
}

group ExtractGroup(source src : QuestionnaireResponse, source location : Location, target bundle : Bundle) {
    src -> bundle.entry as entry, entry.resource = create("Group") as group then {
       src -> group.id = uuid() "rule_group_id_value";
       src -> group.name = evaluate(src, $this.item.where(linkId = 'house-hold-head-name').answer.value) "rule_group_name";

       src -> group.identifier = create('Identifier') as groupIdentifier then {
          src -> groupIdentifier.value = uuid() "rule_group_identifier_value";
          src -> groupIdentifier.use = "secondary" "rule_group_identifier_use";
          src -> groupIdentifier.period = create('Period') as period, period.start = evaluate(src, $this.authored) "rule_group_identifier_period";
       } "rule_group_identifier";

       src -> group.active = true "r_grp_status_data";

       src -> group.characteristic = create('Group_Characteristic') as includeFamily then {
           src -> includeFamily.exclude = false "rule_exclude_group_false";
       } "rule_group_char";

       src -> group.characteristic = create('Group_Characteristic') as familyCharacteristic then {
           src -> familyCharacteristic.code = create('CodeableConcept') as familyCharacteristicCode then{
               src -> familyCharacteristicCode.coding = c("https://smartregister.org/", "active") as coding then {
               src -> coding.display = 'Active' "r_cp_cod_disp_v";
               } "r_grp_vcode";
           } "rule_group_char_code";
       } "rule_group_char";

       src -> group.type = 'person' "r_grp_type_data";
       src -> group.actual = true "r_grp_actual_data";
       src -> group.code = create('CodeableConcept') as concept then ExtractFamilyCode(src, concept) "r_grp_code_data";

        // Add location characteristic
       src -> group.characteristic = create ('Group_Characteristic') as groupCharacteristic then {
            src -> groupCharacteristic.code = create('CodeableConcept') as locationCode then{
                src -> locationCode.coding = c("https://smartregister.org/", "hh_location") as coding then {
                    src -> coding.display = 'Household location' "r_cp_cod_disp_v";
                } "r_grp_vcode";
            } "r_cp_cc_coding_v";

            src -> groupCharacteristic.value = create('Reference') as ref, ref.reference = evaluate(location,  $this.type().name + '/' + $this.id.replaceMatches('/_history/.*', '')) "r_group_char_v";
            src -> groupCharacteristic.exclude = false "r_group_char_exclude_v";
       } "r_group_char_v";

       src then ExtractList(src, location, group, bundle) "r_extract_list";
    } "r_group_bundle_entry";
}

group ExtractFamilyCode(source src : Group, target concept: CodeableConcept) {
    src -> concept.coding = c("https://www.snomed.org", "35359004") as coding then {
        src -> coding.display = 'Family' "r_cp_cod_disp";

    } "r_cp_cc_cod";
}

group ExtractList(source src : QuestionnaireResponse, source location : Location, source group : Group, target bundle : Bundle) {
    src -> bundle.entry as entry, entry.resource = create("List") as list then {
        src -> list.id = uuid() "r_list_id";
        src -> list.status = 'current' "r_list_status";
        src -> list.title = evaluate(location,  $this.name + ' related resources list') "r_list_title";
        src -> list.subject = reference(location) "r_list-subject";
        src -> list.code = create('CodeableConcept') as listCode then{
             src -> listCode.coding = create("Coding") as coding then {
                 src -> coding.system = "https://smartregister.org/" "r_cp_cod_system_v";
                 src -> coding.code = 'related_resource_link' "r_cp_cod_value_v";
                 src -> coding.display = 'Related resources list' "r_cp_cod_disp_v";
             } "r_grp_vcode";
        } "r_list_code_v";
        src -> list.entry = create("List_Entry") as entry then {
            src -> entry.item = reference(group) "r_list_group_entry";
        } "r_list_entry";
    } "r_list_bundle_entry";
}